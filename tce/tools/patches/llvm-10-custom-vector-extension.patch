Index: llvm/include/llvm/Support/MachineValueType.h
===================================================================
--- llvm/include/llvm/Support/MachineValueType.h	(revision 309105)
+++ llvm/include/llvm/Support/MachineValueType.h	(working copy)
@@ -67,78 +67,85 @@
       v256i1         =  22,   //  256 x i1
       v512i1         =  23,   //  512 x i1
       v1024i1        =  24,   // 1024 x i1
+      v2048i1        =  25,   // 2048 x i1
+      v4096i1        =  26,   // 4096 x i1
 
-      v1i8           =  25,   //  1 x i8
-      v2i8           =  26,   //  2 x i8
-      v4i8           =  27,   //  4 x i8
-      v8i8           =  28,   //  8 x i8
-      v16i8          =  29,   // 16 x i8
-      v32i8          =  30,   // 32 x i8
-      v64i8          =  31,   // 64 x i8
-      v128i8         =  32,   //128 x i8
-      v256i8         =  33,   //256 x i8
+      v1i8           =  27,   //  1 x i8
+      v2i8           =  28,   //  2 x i8
+      v4i8           =  29,   //  4 x i8
+      v8i8           =  30,   //  8 x i8
+      v16i8          =  31,   // 16 x i8
+      v32i8          =  32,   // 32 x i8
+      v64i8          =  33,   // 64 x i8
+      v128i8         =  34,   //128 x i8
+      v256i8         =  35,   //256 x i8
+      v512i8         =  36,   //512 x i8
 
-      v1i16          =  34,   //  1 x i16
-      v2i16          =  35,   //  2 x i16
-      v3i16          =  36,   //  3 x i16
-      v4i16          =  37,   //  4 x i16
-      v8i16          =  38,   //  8 x i16
-      v16i16         =  39,   // 16 x i16
-      v32i16         =  40,   // 32 x i16
-      v64i16         =  41,   // 64 x i16
-      v128i16        =  42,   //128 x i16
+      v1i16          =  37,   //  1 x i16
+      v2i16          =  38,   //  2 x i16
+      v3i16          =  39,   //  4 x i16
+      v4i16          =  40,   //  4 x i16
+      v8i16          =  41,   //  8 x i16
+      v16i16         =  42,   // 16 x i16
+      v32i16         =  43,   // 32 x i16
+      v64i16         =  44,   // 64 x i16
+      v128i16        =  45,   //128 x i16
+      v256i16        =  46,   //256 x i16
 
-      v1i32          =  43,   //    1 x i32
-      v2i32          =  44,   //    2 x i32
-      v3i32          =  45,   //    3 x i32
-      v4i32          =  46,   //    4 x i32
-      v5i32          =  47,   //    5 x i32
-      v8i32          =  48,   //    8 x i32
-      v16i32         =  49,   //   16 x i32
-      v32i32         =  50,   //   32 x i32
-      v64i32         =  51,   //   64 x i32
-      v128i32        =  52,   //  128 x i32
-      v256i32        =  53,   //  256 x i32
-      v512i32        =  54,   //  512 x i32
-      v1024i32       =  55,   // 1024 x i32
-      v2048i32       =  56,   // 2048 x i32
+      v1i32          =  47,   //    1 x i32
+      v2i32          =  48,   //    2 x i32
+      v3i32          =  49,   //    3 x i32
+      v4i32          =  50,   //    4 x i32
+      v5i32          =  51,   //    5 x i32
+      v8i32          =  52,   //    8 x i32
+      v16i32         =  53,   //   16 x i32
+      v32i32         =  54,   //   32 x i32
+      v64i32         =  55,   //   64 x i32
+      v128i32        =  56,   //  128 x i32
+      v256i32        =  57,   //  256 x i32
+      v512i32        =  58,   //  512 x i32
+      v1024i32       =  59,   // 1024 x i32
+      v2048i32       =  60,   // 2048 x i32
 
-      v1i64          =  57,   //  1 x i64
-      v2i64          =  58,   //  2 x i64
-      v4i64          =  59,   //  4 x i64
-      v8i64          =  60,   //  8 x i64
-      v16i64         =  61,   // 16 x i64
-      v32i64         =  62,   // 32 x i64
+      v1i64          =  61,   //  1 x i64
+      v2i64          =  62,   //  2 x i64
+      v4i64          =  63,   //  4 x i64
+      v8i64          =  64,   //  8 x i64
+      v16i64         =  65,   // 16 x i64
+      v32i64         =  66,   // 32 x i64
 
-      v1i128         =  63,   //  1 x i128
+      v1i128         =  67,   //  1 x i128
 
       FIRST_INTEGER_FIXEDLEN_VECTOR_VALUETYPE = v1i1,
       LAST_INTEGER_FIXEDLEN_VECTOR_VALUETYPE = v1i128,
 
-      v2f16          =  64,   //    2 x f16
-      v3f16          =  65,   //    3 x f16
-      v4f16          =  66,   //    4 x f16
-      v8f16          =  67,   //    8 x f16
-      v16f16         =  68,   //   16 x f16
-      v32f16         =  69,   //   32 x f16
-      v1f32          =  70,   //    1 x f32
-      v2f32          =  71,   //    2 x f32
-      v3f32          =  72,   //    3 x f32
-      v4f32          =  73,   //    4 x f32
-      v5f32          =  74,   //    5 x f32
-      v8f32          =  75,   //    8 x f32
-      v16f32         =  76,   //   16 x f32
-      v32f32         =  77,   //   32 x f32
-      v64f32         =  78,   //   64 x f32
-      v128f32        =  79,   //  128 x f32
-      v256f32        =  80,   //  256 x f32
-      v512f32        =  81,   //  512 x f32
-      v1024f32       =  82,   // 1024 x f32
-      v2048f32       =  83,   // 2048 x f32
-      v1f64          =  84,   //    1 x f64
-      v2f64          =  85,   //    2 x f64
-      v4f64          =  86,   //    4 x f64
-      v8f64          =  87,   //    8 x f64
+      v2f16          =  68,   //    2 x f16
+      v3f16          =  69,   //    2 x f16
+      v4f16          =  70,   //    4 x f16
+      v8f16          =  71,   //    8 x f16
+      v16f16         =  72,   //   16 x f16
+      v32f16         =  73,   //   32 x f16
+      v64f16         =  74,   //   64 x f16
+      v128f16        =  75,   //  128 x f16
+      v256f16        =  76,   //  256 x f16
+      v1f32          =  77,   //    1 x f32
+      v2f32          =  78,   //    2 x f32
+      v3f32          =  79,   //    3 x f32
+      v4f32          =  80,   //    4 x f32
+      v5f32          =  81,   //    5 x f32
+      v8f32          =  82,   //    8 x f32
+      v16f32         =  83,   //   16 x f32
+      v32f32         =  84,   //   32 x f32
+      v64f32         =  85,   //   64 x f32
+      v128f32        =  86,   //  128 x f32
+      v256f32        =  87,   //  256 x f32
+      v512f32        =  88,   //  512 x f32
+      v1024f32       =  89,   // 1024 x f32
+      v2048f32       =  90,   // 2048 x f32
+      v1f64          =  91,   //    1 x f64
+      v2f64          =  92,   //    2 x f64
+      v4f64          =  93,   //    4 x f64
+      v8f64          =  94,   //    8 x f64
 
       FIRST_FP_FIXEDLEN_VECTOR_VALUETYPE = v2f16,
       LAST_FP_FIXEDLEN_VECTOR_VALUETYPE = v8f64,
@@ -145,39 +155,39 @@
       FIRST_FIXEDLEN_VECTOR_VALUETYPE = v1i1,
       LAST_FIXEDLEN_VECTOR_VALUETYPE = v8f64,
 
-      nxv1i1         =  88,   // n x  1 x i1
-      nxv2i1         =  89,   // n x  2 x i1
-      nxv4i1         =  90,   // n x  4 x i1
-      nxv8i1         =  91,   // n x  8 x i1
-      nxv16i1        =  92,   // n x 16 x i1
-      nxv32i1        =  93,   // n x 32 x i1
+      nxv1i1         =  95,   // n x  1 x i1
+      nxv2i1         =  96,   // n x  2 x i1
+      nxv4i1         =  97,   // n x  4 x i1
+      nxv8i1         =  98,   // n x  8 x i1
+      nxv16i1        =  99,   // n x 16 x i1
+      nxv32i1        =  100,  // n x 32 x i1
 
-      nxv1i8         =  94,   // n x  1 x i8
-      nxv2i8         =  95,   // n x  2 x i8
-      nxv4i8         =  96,   // n x  4 x i8
-      nxv8i8         =  97,   // n x  8 x i8
-      nxv16i8        =  98,   // n x 16 x i8
-      nxv32i8        =  99,   // n x 32 x i8
+      nxv1i8         =  101,  // n x  1 x i8
+      nxv2i8         =  102,  // n x  2 x i8
+      nxv4i8         =  103,  // n x  4 x i8
+      nxv8i8         =  104,  // n x  8 x i8
+      nxv16i8        =  105,  // n x 16 x i8
+      nxv32i8        =  106,  // n x 32 x i8
 
-      nxv1i16        =  100,  // n x  1 x i16
-      nxv2i16        =  101,  // n x  2 x i16
-      nxv4i16        =  102,  // n x  4 x i16
-      nxv8i16        =  103,  // n x  8 x i16
-      nxv16i16       =  104,  // n x 16 x i16
-      nxv32i16       =  105,  // n x 32 x i16
+      nxv1i16        =  107,  // n x  1 x i16
+      nxv2i16        =  108,  // n x  2 x i16
+      nxv4i16        =  109,  // n x  4 x i16
+      nxv8i16        =  110,  // n x  8 x i16
+      nxv16i16       =  111,  // n x 16 x i16
+      nxv32i16       =  112,  // n x 32 x i16
 
-      nxv1i32        =  106,  // n x  1 x i32
-      nxv2i32        =  107,  // n x  2 x i32
-      nxv4i32        =  108,  // n x  4 x i32
-      nxv8i32        =  109,  // n x  8 x i32
-      nxv16i32       =  110,  // n x 16 x i32
-      nxv32i32       =  111,  // n x 32 x i32
+      nxv1i32        =  113,  // n x  1 x i32
+      nxv2i32        =  114,  // n x  2 x i32
+      nxv4i32        =  115,  // n x  4 x i32
+      nxv8i32        =  116,  // n x  8 x i32
+      nxv16i32       =  117,  // n x 16 x i32
+      nxv32i32       =  118,  // n x 32 x i32
 
-      nxv1i64        =  112,  // n x  1 x i64
-      nxv2i64        =  113,  // n x  2 x i64
-      nxv4i64        =  114,  // n x  4 x i64
-      nxv8i64        =  115,  // n x  8 x i64
-      nxv16i64       =  116,  // n x 16 x i64
-      nxv32i64       =  117,  // n x 32 x i64
+      nxv1i64        =  119,  // n x  1 x i64
+      nxv2i64        =  120,  // n x  2 x i64
+      nxv4i64        =  121,  // n x  4 x i64
+      nxv8i64        =  122,  // n x  8 x i64
+      nxv16i64       =  123,  // n x 16 x i64
+      nxv32i64       =  124,  // n x 32 x i64
 
       FIRST_INTEGER_SCALABLE_VALUETYPE = nxv1i1,
@@ -186,17 +200,17 @@
       LAST_INTEGER_SCALABLE_VALUETYPE = nxv32i64,
 
-      nxv2f16        =  118,  // n x  2 x f16
-      nxv4f16        =  119,  // n x  4 x f16
-      nxv8f16        =  120,  // n x  8 x f16
-      nxv1f32        =  121,  // n x  1 x f32
-      nxv2f32        =  122,  // n x  2 x f32
-      nxv4f32        =  123,  // n x  4 x f32
-      nxv8f32        =  124,  // n x  8 x f32
-      nxv16f32       =  125,  // n x 16 x f32
-      nxv1f64        =  126,  // n x  1 x f64
-      nxv2f64        =  127,  // n x  2 x f64
-      nxv4f64        =  128,  // n x  4 x f64
-      nxv8f64        =  129,  // n x  8 x f64
+      nxv2f16        =  125,  // n x  2 x f16
+      nxv4f16        =  126,  // n x  4 x f16
+      nxv8f16        =  127,  // n x  8 x f16
+      nxv1f32        =  128,  // n x  1 x f32
+      nxv2f32        =  129,  // n x  2 x f32
+      nxv4f32        =  130,  // n x  4 x f32
+      nxv8f32        =  131,  // n x  8 x f32
+      nxv16f32       =  132,  // n x 16 x f32
+      nxv1f64        =  133,  // n x  1 x f64
+      nxv2f64        =  134,  // n x  2 x f64
+      nxv4f64        =  135,  // n x  4 x f64
+      nxv8f64        =  136,  // n x  8 x f64
 
       FIRST_FP_SCALABLE_VECTOR_VALUETYPE = nxv2f16,
       LAST_FP_SCALABLE_VECTOR_VALUETYPE = nxv8f64,
@@ -190,20 +206,20 @@
       FIRST_VECTOR_VALUETYPE = v1i1,
       LAST_VECTOR_VALUETYPE  = nxv8f64,
 
-      x86mmx         =  130,   // This is an X86 MMX value
+      x86mmx         =  137,   // This is an X86 MMX value
 
-      Glue           =  131,   // This glues nodes together during pre-RA sched
+      Glue           =  138,   // This glues nodes together during pre-RA sched
 
-      isVoid         =  132,   // This has no value
+      isVoid         =  139,   // This has no value
 
-      Untyped        =  133,   // This value takes a register, but has
+      Untyped        =  140,   // This value takes a register, but has
                                // unspecified type.  The register class
                                // will be determined by the opcode.
 
-      exnref         =  134,   // WebAssembly's exnref type
+      exnref         =  141,   // WebAssembly's exnref type
 
       FIRST_VALUETYPE = 1,     // This is always the beginning of the list.
-      LAST_VALUETYPE =  135,   // This always remains at the end of the list.
+      LAST_VALUETYPE =  142,   // This always remains at the end of the list.
 
       // This is the current maximum for LAST_VALUETYPE.
       // MVT::MAX_ALLOWED_VALUETYPE is used for asserts and to size bit vectors
@@ -373,10 +381,19 @@
     bool is1024BitVector() const {
       return (SimpleTy == MVT::v1024i1 || SimpleTy == MVT::v128i8 ||
               SimpleTy == MVT::v64i16  || SimpleTy == MVT::v32i32 ||
-              SimpleTy == MVT::v16i64);
+              SimpleTy == MVT::v64f16  ||
+              SimpleTy == MVT::v16i64  || SimpleTy == MVT::v32f32);
+    }
+
+    bool is4096bitVector() const {
+      return (SimpleTy == MVT::v4096i1 || SimpleTy == MVT::v512i8 ||
+              SimpleTy == MVT::v256i16 || SimpleTy == MVT::v128i32 ||
+              SimpleTy == MVT::v256f16 || SimpleTy == MVT::v128f32);
     }
 
     /// Return true if this is a 2048-bit vector type.
     bool is2048BitVector() const {
       return (SimpleTy == MVT::v256i8 || SimpleTy == MVT::v128i16 ||
+              SimpleTy == MVT::v128f16 || SimpleTy == MVT::v64f32 ||
+              SimpleTy == MVT::v2048i1 ||
               SimpleTy == MVT::v64i32 || SimpleTy == MVT::v32i64);
@@ -422,5 +430,7 @@
       case v512i1:
       case v1024i1:
+      case v2048i1:
+      case v4096i1:
       case nxv1i1:
       case nxv2i1:
       case nxv4i1:
@@ -440,4 +454,5 @@
       case v128i8:
       case v256i8:
+      case v512i8:
       case nxv1i8:
       case nxv2i8:
@@ -450,4 +466,5 @@
       case v64i16:
       case v128i16:
+      case v256i16:
       case nxv1i16:
       case nxv2i16:
@@ -488,8 +499,11 @@
       case v2f16:
       case v4f16:
       case v8f16:
       case v16f16:
       case v32f16:
+      case v64f16:
+      case v128f16:
+      case v256f16:
       case nxv2f16:
       case nxv4f16:
       case nxv8f16: return f16;
@@ -550,5 +563,6 @@
       default:
         llvm_unreachable("Not a vector MVT!");
       case v2048i32:
+      case v2048i1:
       case v2048f32: return 2048;
       case v1024i1:
@@ -560,9 +575,13 @@
       case v1024i32:
       case v1024f32: return 1024;
+      case v4096i1: return 4096;
       case v512i1:
+      case v512i8:
       case v512i32:
       case v512f32: return 512;
       case v256i1:
       case v256i8:
+      case v256i16:
+      case v256f16:
       case v256i32:
       case v256f32: return 256;
@@ -570,11 +590,13 @@
       case v128i1:
       case v128i8:
       case v128i16:
+      case v128f16:
       case v128i32:
       case v128f32: return 128;
       case v64i1:
       case v64i8:
       case v64i16:
+      case v64f16:
       case v64i32:
       case v64f32: return 64;
       case v32i1:
@@ -736,8 +784,11 @@
       case v64i16:
       case v32i32:
       case v16i64:
+      case v64f16:
       case v32f32: return TypeSize::Fixed(1024);
       case nxv32i32:
       case nxv16i64: return TypeSize::Scalable(1024);
+      case v2048i1:
+      case v128f16:
       case v256i8:
       case v128i16:
@@ -743,7 +795,11 @@
       case v64i32:
       case v64f32: return TypeSize::Fixed(2048);
       case nxv32i64: return TypeSize::Scalable(2048);
+      case v4096i1:
+      case v512i8:
+      case v256i16:
+      case v256f16:
       case v128i32:
       case v128f32:  return TypeSize::Fixed(4096);
       case v256i32:
       case v256f32:  return TypeSize::Fixed(8192);
@@ -910,6 +940,8 @@
         if (NumElements == 256)  return MVT::v256i1;
         if (NumElements == 512)  return MVT::v512i1;
         if (NumElements == 1024) return MVT::v1024i1;
+        if (NumElements == 2048) return MVT::v2048i1;
+        if (NumElements == 4096) return MVT::v4096i1;
         break;
       case MVT::i8:
         if (NumElements == 1)   return MVT::v1i8;
@@ -845,4 +875,5 @@
         if (NumElements == 128) return MVT::v128i8;
         if (NumElements == 256) return MVT::v256i8;
+        if (NumElements == 512) return MVT::v512i8;
         break;
       case MVT::i16:
@@ -855,4 +888,5 @@
         if (NumElements == 64)  return MVT::v64i16;
         if (NumElements == 128) return MVT::v128i16;
+        if (NumElements == 256) return MVT::v256i16;
         break;
       case MVT::i32:
@@ -970,6 +995,9 @@
         if (NumElements == 8)  return MVT::v8f16;
         if (NumElements == 16) return MVT::v16f16;
         if (NumElements == 32) return MVT::v32f16;
+        if (NumElements == 64) return MVT::v64f16;
+        if (NumElements == 128) return MVT::v128f16;
+        if (NumElements == 256) return MVT::v256f16;
         break;
       case MVT::f32:
         if (NumElements == 1)  return MVT::v1f32;
Index: llvm/include/llvm/CodeGen/ValueTypes.td
===================================================================
--- llvm/include/llvm/CodeGen/ValueTypes.td	(revision 309105)
+++ llvm/include/llvm/CodeGen/ValueTypes.td	(working copy)
@@ -43,130+43,137 @@
 def v256i1 : ValueType<256, 22>;   // 256 x i1 vector value
 def v512i1 : ValueType<512, 23>;   // 512 x i1 vector value
 def v1024i1: ValueType<1024,24>;   //1024 x i1 vector value
+def v2048i1: ValueType<2048,25>;   //2048 x i1 vector value
+def v4096i1: ValueType<4096,26>;   //4096 x i1 vector value
 
-def v1i8   : ValueType<8,   25>;   //  1 x i8  vector value
-def v2i8   : ValueType<16 , 26>;   //  2 x i8  vector value
-def v4i8   : ValueType<32 , 27>;   //  4 x i8  vector value
-def v8i8   : ValueType<64 , 28>;   //  8 x i8  vector value
-def v16i8  : ValueType<128, 29>;   // 16 x i8  vector value
-def v32i8  : ValueType<256, 30>;   // 32 x i8  vector value
-def v64i8  : ValueType<512, 31>;   // 64 x i8  vector value
-def v128i8 : ValueType<1024,32>;   //128 x i8  vector value
-def v256i8 : ValueType<2048,33>;   //256 x i8  vector value
+def v1i8   : ValueType<8,   27>;   //  1 x i8  vector value
+def v2i8   : ValueType<16 , 28>;   //  2 x i8  vector value
+def v4i8   : ValueType<32 , 29>;   //  4 x i8  vector value
+def v8i8   : ValueType<64 , 30>;   //  8 x i8  vector value
+def v16i8  : ValueType<128, 31>;   // 16 x i8  vector value
+def v32i8  : ValueType<256, 32>;   // 32 x i8  vector value
+def v64i8  : ValueType<512, 33>;   // 64 x i8  vector value
+def v128i8 : ValueType<1024,34>;   //128 x i8  vector value
+def v256i8 : ValueType<2048,35>;   //256 x i8  vector value
+def v512i8 : ValueType<4096,36>;   //512 x i8  vector value
 
-def v1i16  : ValueType<16 , 34>;   //  1 x i16 vector value
-def v2i16  : ValueType<32 , 35>;   //  2 x i16 vector value
-def v3i16  : ValueType<48 , 36>;   //  3 x i16 vector value
-def v4i16  : ValueType<64 , 37>;   //  4 x i16 vector value
-def v8i16  : ValueType<128, 38>;   //  8 x i16 vector value
-def v16i16 : ValueType<256, 39>;   // 16 x i16 vector value
-def v32i16 : ValueType<512, 40>;   // 32 x i16 vector value
-def v64i16 : ValueType<1024,41>;   // 64 x i16 vector value
-def v128i16: ValueType<2048,42>;   //128 x i16 vector value
+def v1i16  : ValueType<16 , 37>;   //  1 x i16 vector value
+def v2i16  : ValueType<32 , 38>;   //  2 x i16 vector value
+def v3i16  : ValueType<48 , 39>;   //  3 x i16 vector value
+def v4i16  : ValueType<64 , 40>;   //  4 x i16 vector value
+def v8i16  : ValueType<128, 41>;   //  8 x i16 vector value
+def v16i16 : ValueType<256, 42>;   // 16 x i16 vector value
+def v32i16 : ValueType<512, 43>;   // 32 x i16 vector value
+def v64i16 : ValueType<1024,44>;   // 64 x i16 vector value
+def v128i16: ValueType<2048,45>;   //128 x i16 vector value
+def v256i16: ValueType<4096,46>;   //256 x i16 vector value
 
-def v1i32    : ValueType<32 , 43>;   //  1 x i32 vector value
-def v2i32    : ValueType<64 , 44>;   //  2 x i32 vector value
-def v3i32    : ValueType<96 , 45>;   //  3 x i32 vector value
-def v4i32    : ValueType<128, 46>;   //  4 x i32 vector value
-def v5i32    : ValueType<160, 47>;   //  5 x i32 vector value
-def v8i32    : ValueType<256, 48>;   //  8 x i32 vector value
-def v16i32   : ValueType<512, 49>;   // 16 x i32 vector value
-def v32i32   : ValueType<1024,50>;   // 32 x i32 vector value
-def v64i32   : ValueType<2048,51>;   // 64 x i32 vector value
-def v128i32  : ValueType<4096,52>;   // 128 x i32 vector value
-def v256i32  : ValueType<8182,53>;   // 256 x i32 vector value
-def v512i32  : ValueType<16384,54>;  // 512 x i32 vector value
-def v1024i32 : ValueType<32768,55>;  // 1024 x i32 vector value
-def v2048i32 : ValueType<65536,56>;  // 2048 x i32 vector value
+def v1i32    : ValueType<32 , 47>;   //  1 x i32 vector value
+def v2i32    : ValueType<64 , 48>;   //  2 x i32 vector value
+def v3i32    : ValueType<96 , 49>;   //  3 x i32 vector value
+def v4i32    : ValueType<128, 50>;   //  4 x i32 vector value
+def v5i32    : ValueType<160, 51>;   //  5 x i32 vector value
+def v8i32    : ValueType<256, 52>;   //  8 x i32 vector value
+def v16i32   : ValueType<512, 53>;   // 16 x i32 vector value
+def v32i32   : ValueType<1024,54>;   // 32 x i32 vector value
+def v64i32   : ValueType<2048,55>;   // 64 x i32 vector value
+def v128i32  : ValueType<4096,56>;   // 128 x i32 vector value
+def v256i32  : ValueType<8182,57>;   // 256 x i32 vector value
+def v512i32  : ValueType<16384,58>;  // 512 x i32 vector value
+def v1024i32 : ValueType<32768,59>;  // 1024 x i32 vector value
+def v2048i32 : ValueType<65536,60>;  // 2048 x i32 vector value
 
-def v1i64  : ValueType<64 , 57>;   //  1 x i64 vector value
-def v2i64  : ValueType<128, 58>;   //  2 x i64 vector value
-def v4i64  : ValueType<256, 59>;   //  4 x i64 vector value
-def v8i64  : ValueType<512, 60>;   //  8 x i64 vector value
-def v16i64 : ValueType<1024,61>;   // 16 x i64 vector value
-def v32i64 : ValueType<2048,62>;   // 32 x i64 vector value
+def v1i64  : ValueType<64 , 61>;   //  1 x i64 vector value
+def v2i64  : ValueType<128, 62>;   //  2 x i64 vector value
+def v4i64  : ValueType<256, 63>;   //  4 x i64 vector value
+def v8i64  : ValueType<512, 64>;   //  8 x i64 vector value
+def v16i64 : ValueType<1024,65>;   // 16 x i64 vector value
+def v32i64 : ValueType<2048,66>;   // 32 x i64 vector value
 
-def v1i128 : ValueType<128, 63>;   //  1 x i128 vector value
+def v1i128 : ValueType<128, 67>;   //  1 x i128 vector value
 
-def v2f16    : ValueType<32 , 64>;    //    2 x f16 vector value
-def v3f16    : ValueType<48 , 65>;    //    3 x f16 vector value
-def v4f16    : ValueType<64 , 66>;    //    4 x f16 vector value
-def v8f16    : ValueType<128, 67>;    //    8 x f16 vector value
-def v16f16   : ValueType<256, 68>;    //    8 x f16 vector value
-def v32f16   : ValueType<512, 69>;    //    8 x f16 vector value
-def v1f32    : ValueType<32 , 70>;    //    1 x f32 vector value
-def v2f32    : ValueType<64 , 71>;    //    2 x f32 vector value
-def v3f32    : ValueType<96 , 72>;    //    3 x f32 vector value
-def v4f32    : ValueType<128, 73>;    //    4 x f32 vector value
-def v5f32    : ValueType<160, 74>;    //    5 x f32 vector value
-def v8f32    : ValueType<256, 75>;    //    8 x f32 vector value
-def v16f32   : ValueType<512,  76>;   //   16 x f32 vector value
-def v32f32   : ValueType<1024, 77>;   //   32 x f32 vector value
-def v64f32   : ValueType<2048, 78>;   //   64 x f32 vector value
-def v128f32  : ValueType<4096, 79>;   //  128 x f32 vector value
-def v256f32  : ValueType<8182, 80>;   //  256 x f32 vector value
-def v512f32  : ValueType<16384, 81>;  //  512 x f32 vector value
-def v1024f32 : ValueType<32768, 82>;  // 1024 x f32 vector value
-def v2048f32 : ValueType<65536, 83>;  // 2048 x f32 vector value
-def v1f64    : ValueType<64, 84>;     //    1 x f64 vector value
-def v2f64    : ValueType<128, 85>;    //    2 x f64 vector value
-def v4f64    : ValueType<256, 86>;    //    4 x f64 vector value
-def v8f64    : ValueType<512, 87>;    //    8 x f64 vector value
+def v2f16    : ValueType<32 , 68>;    //    2 x f16 vector value
+def v3f16    : ValueType<48 , 69>;    //    3 x f16 vector value
+def v4f16    : ValueType<64 , 70>;    //    4 x f16 vector value
+def v8f16    : ValueType<128, 71>;    //    8 x f16 vector value
+def v16f16   : ValueType<256, 72>;    //   16 x f16 vector value
+def v32f16   : ValueType<512, 73>;    //   32 x f16 vector value
+def v64f16   : ValueType<1024,74>;    //   64 x f16 vector value
+def v128f16  : ValueType<2048,75>;    //  128 x f16 vector value
+def v256f16  : ValueType<4096,76>;    //  256 x f16 vector value
+def v1f32    : ValueType<32 , 77>;    //    1 x f32 vector value
+def v2f32    : ValueType<64 , 78>;    //    2 x f32 vector value
+def v3f32    : ValueType<96 , 79>;    //    3 x f32 vector value
+def v4f32    : ValueType<128, 80>;    //    4 x f32 vector value
+def v5f32    : ValueType<160, 81>;    //    5 x f32 vector value
+def v8f32    : ValueType<256, 82>;    //    8 x f32 vector value
+def v16f32   : ValueType<512,  83>;   //   16 x f32 vector value
+def v32f32   : ValueType<1024, 84>;   //   32 x f32 vector value
+def v64f32   : ValueType<2048, 85>;   //   64 x f32 vector value
+def v128f32  : ValueType<4096, 86>;   //  128 x f32 vector value
+def v256f32  : ValueType<8182, 87>;   //  256 x f32 vector value
+def v512f32  : ValueType<16384, 88>;  //  512 x f32 vector value
+def v1024f32 : ValueType<32768, 89>;  // 1024 x f32 vector value
+def v2048f32 : ValueType<65536, 90>;  // 2048 x f32 vector value
+def v1f64    : ValueType<64, 91>;     //    1 x f64 vector value
+def v2f64    : ValueType<128, 92>;    //    2 x f64 vector value
+def v4f64    : ValueType<256, 93>;    //    4 x f64 vector value
+def v8f64    : ValueType<512, 94>;    //    8 x f64 vector value
 
-def nxv1i1  : ValueType<1,   88>;  // n x  1 x i1  vector value
-def nxv2i1  : ValueType<2,   89>;  // n x  2 x i1  vector value
-def nxv4i1  : ValueType<4,   90>;  // n x  4 x i1  vector value
-def nxv8i1  : ValueType<8,   91>;  // n x  8 x i1  vector value
-def nxv16i1 : ValueType<16,  92>;  // n x 16 x i1  vector value
-def nxv32i1 : ValueType<32,  93>;  // n x 32 x i1  vector value
+def nxv1i1  : ValueType<1,   95>;  // n x  1 x i1  vector value
+def nxv2i1  : ValueType<2,   96>;  // n x  2 x i1  vector value
+def nxv4i1  : ValueType<4,   97>;  // n x  4 x i1  vector value
+def nxv8i1  : ValueType<8,   98>;  // n x  8 x i1  vector value
+def nxv16i1 : ValueType<16,  99>; // n x 16 x i1  vector value
+def nxv32i1 : ValueType<32,  100>; // n x 32 x i1  vector value
 
-def nxv1i8  : ValueType<8,   94>;  // n x  1 x i8  vector value
-def nxv2i8  : ValueType<16,  95>;  // n x  2 x i8  vector value
-def nxv4i8  : ValueType<32,  96>;  // n x  4 x i8  vector value
-def nxv8i8  : ValueType<64,  97>;  // n x  8 x i8  vector value
-def nxv16i8 : ValueType<128, 98>;  // n x 16 x i8  vector value
-def nxv32i8 : ValueType<256, 99>;  // n x 32 x i8  vector value
+def nxv1i8  : ValueType<8,  101>;  // n x  1 x i8  vector value
+def nxv2i8  : ValueType<16, 102>;  // n x  2 x i8  vector value
+def nxv4i8  : ValueType<32, 103>;  // n x  4 x i8  vector value
+def nxv8i8  : ValueType<64, 104>;  // n x  8 x i8  vector value
+def nxv16i8 : ValueType<128,105>;  // n x 16 x i8  vector value
+def nxv32i8 : ValueType<256,106>;  // n x 32 x i8  vector value
 
-def nxv1i16 : ValueType<16,  100>; // n x  1 x i16 vector value
-def nxv2i16 : ValueType<32,  101>; // n x  2 x i16 vector value
-def nxv4i16 : ValueType<64,  102>; // n x  4 x i16 vector value
-def nxv8i16 : ValueType<128, 103>; // n x  8 x i16 vector value
-def nxv16i16: ValueType<256, 104>; // n x 16 x i16 vector value
-def nxv32i16: ValueType<512, 105>; // n x 32 x i16 vector value
+def nxv1i16 : ValueType<16,  107>; // n x  1 x i16 vector value
+def nxv2i16 : ValueType<32,  108>; // n x  2 x i16 vector value
+def nxv4i16 : ValueType<64,  109>; // n x  4 x i16 vector value
+def nxv8i16 : ValueType<128, 110>; // n x  8 x i16 vector value
+def nxv16i16: ValueType<256, 111>; // n x 16 x i16 vector value
+def nxv32i16: ValueType<512, 112>; // n x 32 x i16 vector value
 
-def nxv1i32 : ValueType<32,  106>; // n x  1 x i32 vector value
-def nxv2i32 : ValueType<64,  107>; // n x  2 x i32 vector value
-def nxv4i32 : ValueType<128, 108>; // n x  4 x i32 vector value
-def nxv8i32 : ValueType<256, 109>; // n x  8 x i32 vector value
-def nxv16i32: ValueType<512, 110>; // n x 16 x i32 vector value
-def nxv32i32: ValueType<1024,111>; // n x 32 x i32 vector value
+def nxv1i32 : ValueType<32,  113>; // n x  1 x i32 vector value
+def nxv2i32 : ValueType<64,  114>; // n x  2 x i32 vector value
+def nxv4i32 : ValueType<128, 115>; // n x  4 x i32 vector value
+def nxv8i32 : ValueType<256, 116>; // n x  8 x i32 vector value
+def nxv16i32: ValueType<512, 117>; // n x 16 x i32 vector value
+def nxv32i32: ValueType<1024,118>; // n x 32 x i32 vector value
 
-def nxv1i64 : ValueType<64,  112>; // n x  1 x i64 vector value
-def nxv2i64 : ValueType<128, 113>; // n x  2 x i64 vector value
-def nxv4i64 : ValueType<256, 114>; // n x  4 x i64 vector value
-def nxv8i64 : ValueType<512, 115>; // n x  8 x i64 vector value
-def nxv16i64: ValueType<1024,116>; // n x 16 x i64 vector value
-def nxv32i64: ValueType<2048,117>; // n x 32 x i64 vector value
+def nxv1i64 : ValueType<64,  119>; // n x  1 x i64 vector value
+def nxv2i64 : ValueType<128, 120>; // n x  2 x i64 vector value
+def nxv4i64 : ValueType<256, 121>; // n x  4 x i64 vector value
+def nxv8i64 : ValueType<512, 122>; // n x  8 x i64 vector value
+def nxv16i64: ValueType<1024,123>; // n x 16 x i64 vector value
+def nxv32i64: ValueType<2048,124>; // n x 32 x i64 vector value
 
-def nxv2f16  : ValueType<32 , 118>; // n x  2 x f16 vector value
-def nxv4f16  : ValueType<64 , 119>; // n x  4 x f16 vector value
-def nxv8f16  : ValueType<128, 120>; // n x  8 x f16 vector value
-def nxv1f32  : ValueType<32 , 121>; // n x  1 x f32 vector value
-def nxv2f32  : ValueType<64 , 122>; // n x  2 x f32 vector value
-def nxv4f32  : ValueType<128, 123>; // n x  4 x f32 vector value
-def nxv8f32  : ValueType<256, 124>; // n x  8 x f32 vector value
-def nxv16f32 : ValueType<512, 125>; // n x 16 x f32 vector value
-def nxv1f64  : ValueType<64,  126>; // n x  1 x f64 vector value
-def nxv2f64  : ValueType<128, 127>; // n x  2 x f64 vector value
-def nxv4f64  : ValueType<256, 128>; // n x  4 x f64 vector value
-def nxv8f64  : ValueType<512, 129>; // n x  8 x f64 vector value
+def nxv2f16  : ValueType<32 , 125>; // n x  2 x f16 vector value
+def nxv4f16  : ValueType<64 , 126>; // n x  4 x f16 vector value
+def nxv8f16  : ValueType<128, 127>; // n x  8 x f16 vector value
+def nxv1f32  : ValueType<32 , 128>; // n x  1 x f32 vector value
+def nxv2f32  : ValueType<64 , 129>; // n x  2 x f32 vector value
+def nxv4f32  : ValueType<128, 130>; // n x  4 x f32 vector value
+def nxv8f32  : ValueType<256, 131>; // n x  8 x f32 vector value
+def nxv16f32 : ValueType<512, 132>; // n x 16 x f32 vector value
+def nxv1f64  : ValueType<64,  133>; // n x  1 x f64 vector value
+def nxv2f64  : ValueType<128, 134>; // n x  2 x f64 vector value
+def nxv4f64  : ValueType<256, 135>; // n x  4 x f64 vector value
+def nxv8f64  : ValueType<512, 136>; // n x  8 x f64 vector value
 
-def x86mmx : ValueType<64 , 130>;   // X86 MMX value
-def FlagVT : ValueType<0  , 131>;   // Pre-RA sched glue
-def isVoid : ValueType<0  , 132>;   // Produces no value
-def untyped: ValueType<8  , 133>;   // Produces an untyped value
-def exnref: ValueType<0, 134>;      // WebAssembly's exnref type
+def x86mmx : ValueType<64 , 137>;   // X86 MMX value
+def FlagVT : ValueType<0  , 138>;   // Pre-RA sched glue
+def isVoid : ValueType<0  , 139>;   // Produces no value
+def untyped: ValueType<8  , 140>;   // Produces an untyped value
+def exnref: ValueType<0, 141>;      // WebAssembly's except_ref type
 def token  : ValueType<0  , 248>;   // TokenTy
 def MetadataVT: ValueType<0, 249>;  // Metadata
 
 // Pseudo valuetype mapped to the current pointer size to any address space.
Index: llvm/include/llvm/IR/Intrinsics.td
===================================================================
--- llvm/include/llvm/IR/Intrinsics.td	(revision 309105)
+++ llvm/include/llvm/IR/Intrinsics.td	(working copy)
@@ -194,8 +194,15 @@
 def llvm_v16i1_ty      : LLVMType<v16i1>;    //  16 x i1
 def llvm_v32i1_ty      : LLVMType<v32i1>;    //  32 x i1
 def llvm_v64i1_ty      : LLVMType<v64i1>;    //  64 x i1
+def llvm_v128i1_ty     : LLVMType<v128i1>;   // 128 x i1
+def llvm_v256i1_ty     : LLVMType<v256i1>;   // 256 x i1
 def llvm_v512i1_ty     : LLVMType<v512i1>;   // 512 x i1
 def llvm_v1024i1_ty    : LLVMType<v1024i1>;  //1024 x i1
+def llvm_v2048i1_ty    : LLVMType<v2048i1>;  //2048 x i1
+def llvm_v4096i1_ty    : LLVMType<v4096i1>;  //4096 x i1
+def llvm_v512i8_ty     : LLVMType<v512i8>;   // 512 x i8
+def llvm_v256i16_ty    : LLVMType<v256i16>;  // 256 x i16
+def llvm_v128i32_ty    : LLVMType<v128i32>;  // 128 x i32
 
 def llvm_v1i8_ty       : LLVMType<v1i8>;     //  1 x i8
 def llvm_v2i8_ty       : LLVMType<v2i8>;     //  2 x i8
@@ -236,12 +239,19 @@
 def llvm_v2f16_ty      : LLVMType<v2f16>;    //  2 x half (__fp16)
 def llvm_v4f16_ty      : LLVMType<v4f16>;    //  4 x half (__fp16)
 def llvm_v8f16_ty      : LLVMType<v8f16>;    //  8 x half (__fp16)
+def llvm_v16f16_ty     : LLVMType<v16f16>;   //  16 x half (__fp16)
+def llvm_v32f16_ty     : LLVMType<v32f16>;   //  32 x half (__fp16)
+def llvm_v64f16_ty     : LLVMType<v64f16>;   //  64 x half (__fp16)
+def llvm_v128f16_ty    : LLVMType<v128f16>;  // 128 x half (__fp16)
+def llvm_v256f16_ty    : LLVMType<v256f16>;  // 256 x half (__fp16)
 def llvm_v1f32_ty      : LLVMType<v1f32>;    //  1 x float
 def llvm_v2f32_ty      : LLVMType<v2f32>;    //  2 x float
 def llvm_v4f32_ty      : LLVMType<v4f32>;    //  4 x float
 def llvm_v8f32_ty      : LLVMType<v8f32>;    //  8 x float
 def llvm_v16f32_ty     : LLVMType<v16f32>;   // 16 x float
 def llvm_v32f32_ty     : LLVMType<v32f32>;   // 32 x float
+def llvm_v64f32_ty     : LLVMType<v64f32>;   // 64 x float
+def llvm_v128f32_ty    : LLVMType<v128f32>;  //128 x float
 def llvm_v1f64_ty      : LLVMType<v1f64>;    //  1 x double
 def llvm_v2f64_ty      : LLVMType<v2f64>;    //  2 x double
 def llvm_v4f64_ty      : LLVMType<v4f64>;    //  4 x double
Index: llvm/lib/IR/ValueTypes.cpp
===================================================================
--- llvm/lib/CodeGen/ValueTypes.cpp	(revision 309105)
+++ llvm/lib/CodeGen/ValueTypes.cpp	(working copy)
@@ -167,6 +167,9 @@
   case MVT::v256i1:  return VectorType::get(Type::getInt1Ty(Context), 256);
   case MVT::v512i1:  return VectorType::get(Type::getInt1Ty(Context), 512);
   case MVT::v1024i1: return VectorType::get(Type::getInt1Ty(Context), 1024);
+  case MVT::v2048i1: return VectorType::get(Type::getInt1Ty(Context), 2048);
+  case MVT::v4096i1: return VectorType::get(Type::getInt1Ty(Context), 4096);
+  case MVT::v512i8:  return VectorType::get(Type::getInt8Ty(Context), 512);
   case MVT::v1i8:    return VectorType::get(Type::getInt8Ty(Context), 1);
   case MVT::v2i8:    return VectorType::get(Type::getInt8Ty(Context), 2);
   case MVT::v4i8:    return VectorType::get(Type::getInt8Ty(Context), 4);
@@ -212,6 +215,10 @@
   case MVT::v8f16:   return VectorType::get(Type::getHalfTy(Context), 8);
   case MVT::v16f16:  return VectorType::get(Type::getHalfTy(Context), 16);
   case MVT::v32f16:  return VectorType::get(Type::getHalfTy(Context), 32);
+  case MVT::v64f16:  return VectorType::get(Type::getHalfTy(Context), 64);
+  case MVT::v128f16: return VectorType::get(Type::getHalfTy(Context), 128);
+  case MVT::v256f16: return VectorType::get(Type::getHalfTy(Context), 256);
+  case MVT::v256i16: return VectorType::get(Type::getInt16Ty(Context), 256);
   case MVT::v1f32:   return VectorType::get(Type::getFloatTy(Context), 1);
   case MVT::v2f32:   return VectorType::get(Type::getFloatTy(Context), 2);
   case MVT::v3f32:   return VectorType::get(Type::getFloatTy(Context), 3);
Index: llvm/tools/llvm-config/llvm-config.cpp
===================================================================
--- llvm/tools/llvm-config/llvm-config.cpp	(revision 309105)
+++ llvm/tools/llvm-config/llvm-config.cpp	(working copy)
@@ -216,6 +216,7 @@
   --shared-mode     Print how the provided components can be collectively linked (`shared` or `static`).\n\
   --link-shared     Link the components as shared libraries.\n\
   --link-static     Link the component libraries statically.\n\
+  --tce-patches     Print list of applied TCE patches.\n\
   --ignore-libllvm  Ignore libLLVM and link component libraries instead.\n\
 Typical components:\n\
   all               All LLVM libraries (default).\n\
@@ -567,6 +568,11 @@
         LinkMode = LinkModeShared;
       } else if (Arg == "--link-static") {
         LinkMode = LinkModeStatic;
+      } else if (Arg == "--tce-patches") {
+        OS << "custom-vector-extension-wide" << '\n'
+           << "tce-and-tcele" << '\n'
+           << "memcpyoptimizer-only-on-default-as" << '\n'
+           << "loopidiomrecognize-only-on-default-as" << '\n';
       } else {
         usage();
       }
Index: llvm/utils/TableGen/CodeGenTarget.cpp
===================================================================
--- llvm/utils/TableGen/CodeGenTarget.cpp	(revision 309105)
+++ llvm/utils/TableGen/CodeGenTarget.cpp	(working copy)
@@ -82,9 +82,12 @@
   case MVT::v16i1:    return "MVT::v16i1";
   case MVT::v32i1:    return "MVT::v32i1";
   case MVT::v64i1:    return "MVT::v64i1";
   case MVT::v128i1:   return "MVT::v128i1";
+  case MVT::v256i1:   return "MVT::v256i1";
   case MVT::v512i1:   return "MVT::v512i1";
   case MVT::v1024i1:  return "MVT::v1024i1";
+  case MVT::v2048i1:  return "MVT::v2048i1";
+  case MVT::v4096i1:  return "MVT::v4096i1";
   case MVT::v1i8:     return "MVT::v1i8";
   case MVT::v2i8:     return "MVT::v2i8";
   case MVT::v4i8:     return "MVT::v4i8";
@@ -104,4 +108,6 @@
   case MVT::v64i16:   return "MVT::v64i16";
   case MVT::v128i16:  return "MVT::v128i16";
+  case MVT::v256i16:  return "MVT::v256i16";
+  case MVT::v512i8:   return "MVT::v512i8";
   case MVT::v1i32:    return "MVT::v1i32";
   case MVT::v2i32:    return "MVT::v2i32";
@@ -118,8 +123,11 @@
   case MVT::v2f16:    return "MVT::v2f16";
   case MVT::v4f16:    return "MVT::v4f16";
   case MVT::v8f16:    return "MVT::v8f16";
   case MVT::v16f16:   return "MVT::v16f16";
   case MVT::v32f16:   return "MVT::v32f16";
+  case MVT::v64f16:   return "MVT::v64f16";
+  case MVT::v128f16:  return "MVT::v128f16";
+  case MVT::v256f16:  return "MVT::v256f16";
   case MVT::v1f32:    return "MVT::v1f32";
   case MVT::v2f32:    return "MVT::v2f32";
   case MVT::v3f32:    return "MVT::v3f32";
Index: llvm/utils/TableGen/IntrinsicEmitter.cpp
===================================================================
--- llvm/utils/TableGen/IntrinsicEmitter.cpp	(revision 360279)
+++ llvm/utils/TableGen/IntrinsicEmitter.cpp	(working copy)
@@ -215,17 +215,21 @@
   IIT_PTR_TO_ELT = 33,
   IIT_VEC_OF_ANYPTRS_TO_ELT = 34,
   IIT_I128 = 35,
-  IIT_V512 = 36,
-  IIT_V1024 = 37,
-  IIT_STRUCT6 = 38,
-  IIT_STRUCT7 = 39,
-  IIT_STRUCT8 = 40,
-  IIT_F128 = 41,
-  IIT_VEC_ELEMENT = 42,
-  IIT_SCALABLE_VEC = 43,
-  IIT_SUBDIVIDE2_ARG = 44,
-  IIT_SUBDIVIDE4_ARG = 45,
-  IIT_VEC_OF_BITCASTS_TO_INT = 46
+  IIT_V128 = 36,
+  IIT_V256 = 37,
+  IIT_V512 = 38,
+  IIT_V1024 = 39,
+  IIT_V2048 = 40,
+  IIT_V4096 = 41,
+  IIT_STRUCT6 = 42,
+  IIT_STRUCT7 = 43,
+  IIT_STRUCT8 = 44,
+  IIT_F128 = 45,
+  IIT_VEC_ELEMENT = 46,
+  IIT_SCALABLE_VEC = 47,
+  IIT_SUBDIVIDE2_ARG = 48,
+  IIT_SUBDIVIDE4_ARG = 49,
+  IIT_VEC_OF_BITCASTS_TO_INT = 50
 };
 
 static void EncodeFixedValueType(MVT::SimpleValueType VT,
@@ -344,8 +348,12 @@
     case 16: Sig.push_back(IIT_V16); break;
     case 32: Sig.push_back(IIT_V32); break;
     case 64: Sig.push_back(IIT_V64); break;
+    case 128: Sig.push_back(IIT_V128); break;
+    case 256: Sig.push_back(IIT_V256); break;
     case 512: Sig.push_back(IIT_V512); break;
     case 1024: Sig.push_back(IIT_V1024); break;
+    case 2048: Sig.push_back(IIT_V2048); break;
+    case 4096: Sig.push_back(IIT_V4096); break;
     }
 
     return EncodeFixedValueType(VVT.getVectorElementType().SimpleTy, Sig);
Index: llvm/lib/IR/Function.cpp
===================================================================
--- llvm/lib/IR/Function.cpp	(revision 360279)
+++ llvm/lib/IR/Function.cpp	(working copy)
@@ -715,17 +715,21 @@
   IIT_PTR_TO_ELT = 33,
   IIT_VEC_OF_ANYPTRS_TO_ELT = 34,
   IIT_I128 = 35,
-  IIT_V512 = 36,
-  IIT_V1024 = 37,
-  IIT_STRUCT6 = 38,
-  IIT_STRUCT7 = 39,
-  IIT_STRUCT8 = 40,
-  IIT_F128 = 41,
-  IIT_VEC_ELEMENT = 42,
-  IIT_SCALABLE_VEC = 43,
-  IIT_SUBDIVIDE2_ARG = 44,
-  IIT_SUBDIVIDE4_ARG = 45,
-  IIT_VEC_OF_BITCASTS_TO_INT = 46
+  IIT_V128 = 36,
+  IIT_V256 = 37,
+  IIT_V512 = 38,
+  IIT_V1024 = 39,
+  IIT_V2048 = 40,
+  IIT_V4096 = 41,
+  IIT_STRUCT6 = 42,
+  IIT_STRUCT7 = 43,
+  IIT_STRUCT8 = 44,
+  IIT_F128 = 45,
+  IIT_VEC_ELEMENT = 46,
+  IIT_SCALABLE_VEC = 47,
+  IIT_SUBDIVIDE2_ARG = 48,
+  IIT_SUBDIVIDE4_ARG = 49,
+  IIT_VEC_OF_BITCASTS_TO_INT = 50
 };
 
 static void DecodeIITType(unsigned &NextElt, ArrayRef<unsigned char> Infos,
@@ -772,6 +776,14 @@
     OutputTable.push_back(IITDescriptor::get(IITDescriptor::Vector, 64));
     DecodeIITType(NextElt, Infos, OutputTable);
     return;
+  case IIT_V128:
+    OutputTable.push_back(IITDescriptor::get(IITDescriptor::Vector, 128));
+    DecodeIITType(NextElt, Infos, OutputTable);
+    return;
+  case IIT_V256:
+    OutputTable.push_back(IITDescriptor::get(IITDescriptor::Vector, 256));
+    DecodeIITType(NextElt, Infos, OutputTable);
+    return;
   case IIT_V512:
     OutputTable.push_back(IITDescriptor::get(IITDescriptor::Vector, 512));
     DecodeIITType(NextElt, Infos, OutputTable);
@@ -780,6 +792,14 @@
     OutputTable.push_back(IITDescriptor::get(IITDescriptor::Vector, 1024));
     DecodeIITType(NextElt, Infos, OutputTable);
     return;
+  case IIT_V2048:
+    OutputTable.push_back(IITDescriptor::get(IITDescriptor::Vector, 2048));
+    DecodeIITType(NextElt, Infos, OutputTable);
+    return;
+  case IIT_V4096:
+    OutputTable.push_back(IITDescriptor::get(IITDescriptor::Vector, 4096));
+    DecodeIITType(NextElt, Infos, OutputTable);
+    return;
   case IIT_PTR:
     OutputTable.push_back(IITDescriptor::get(IITDescriptor::Pointer, 0));
     DecodeIITType(NextElt, Infos, OutputTable);
